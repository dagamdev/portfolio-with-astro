---
import type { TextData } from '@/types'

interface Props {
  textData: TextData['text']
  tagName?: 'p' | 'h1' | 'h2' | 'h3' | 'h4'
  class?: string
}

const { textData, tagName = 'p' } = Astro.props

let html = ''
const controllers = {
  bold: {
    open: false,
    tag: 'strong'
  },
  italic: {
    open: false,
    tag: 'em'
  }, 
  strikethrough: {
    open: false,
    tag: 's'
  },
  underline: {
    open: false,
    tag: 'u'
  },
  color: {
    open: false,
    tag: 'span'
  },
  link: {
    open: false,
    tag: 'a'
  }
}

for (const message of textData) {
  if (message.link !== null && !controllers.link.open) {
    html += `<a href="${message.link}" class='hover:underline text-blue-600 dark:text-blue-200'>`
    controllers.link.open = true
  } else if (controllers.link.open) {
    html += '</a>'
    controllers.link.open = false
  }

  for (const [key, value] of Object.entries(message.annotations)) {
    if (key === 'code') continue
    const controller = controllers[key as keyof typeof controllers]
    
    if (typeof value === 'string') {
      if (value !== 'default') {
        if (!controller.open) {
          html += `<${controller.tag} class="text-${value}">`
          controller.open = true
        }
      } else if (controller.open) {
        html += `</${controller.tag}>`
        controller.open = false
      }
    } else {
      if (value) {
        if (!controller.open) {
          html += `<${controller.tag}>`
          controller.open = true
        }
      } else if (controller.open) {
        html += `</${controller.tag}>`
        controller.open = false
      }
    }
  }

  html += message.content
}

for (const [_, value] of Object.entries(controllers)) {
  if (value.open) {
    html += `</${value.tag}>`
    value.open = false
  }
}
console.log(html)
---

<Fragment {...Astro.props} set:html={`<${tagName} class="whitespace-pre-wrap text-balance" >${html}</${tagName}>`} />

<style is:global>
  .text-red {
    color: #dc2626;
  }
  .text-gray {
    color: #4b5563;
  }
  .text-brown {
    color: #92400e;
  }
  .text-orange {
    color: #ea580c;
  }
  .text-yellow {
    color: #ca8a04;
  }
  .text-green {
    color: #16a34a;
  }
  .text-blue {
    color: #2563eb;
  }
  .text-purple {
    color: #9333ea;
  }
  .text-pink {
    color: #db2777;
  }

  @media (prefers-color-scheme: dark) {
    .text-red {
      color: #f87171;
    }
    .text-gray {
      color: #9ca3af;
    }
    .text-brown {
      color: #a16207;
    }
    .text-orange {
      color: #fb923c;
    }
    .text-yellow {
      color: #facc15;
    }
    .text-green {
      color: #4ade80;
    }
    .text-blue {
      color: #60a5fa;
    }
    .text-purple {
      color: #c084fc;
    }
    .text-pink {
      color: #f472b6;
    }
  }
</style>
